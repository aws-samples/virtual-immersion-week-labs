---
    AWSTemplateFormatVersion: '2010-09-09'
    Description: This stack deploys the S3 bucket and DynamoDB table with the appropriate VPC. 
    
    Mappings:
      # Hard values for the subnet masks. These masks define
      # the range of internal IP addresses that can be assigned.
      # The VPC can have all IP's from 10.0.0.0 to 10.0.255.255
      # There are four subnets which cover the ranges:
      #
      # 10.0.0.0 - 10.0.0.255
      # 10.0.1.0 - 10.0.1.255
      # 10.0.2.0 - 10.0.2.255
      # 10.0.3.0 - 10.0.3.255
      #
      # If you need more IP addresses (perhaps you have so many
      # instances that you run out) then you can customize these
      # ranges to add more
      SubnetConfig:
        VPC:
          CIDR: '10.0.0.0/16'
        PublicOne:
          CIDR: '10.0.0.0/24'
        PublicTwo:
          CIDR: '10.0.1.0/24'
        PrivateOne:
          CIDR: '10.0.2.0/24'
        PrivateTwo:
          CIDR: '10.0.3.0/24'
    
    Resources:
      Mono:
        Type: AWS::ECR::Repository
    
      Like:
        Type: AWS::ECR::Repository
    
      # VPC in which containers will be networked.
      # It has two public subnets, and two private subnets.
      # We distribute the subnets across the first two available subnets
      # for the region, for high availability.
      VPC:
        Type: AWS::EC2::VPC
        Properties:
          EnableDnsSupport: true
          EnableDnsHostnames: true
          CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
          Tags:
            - Key: Name
              Value: !Sub CiCdEksLab-VPC-${AWS::StackName}
    
      # Two public subnets, where a public load balancer will later be created.
      PublicSubnetOne:
        Type: AWS::EC2::Subnet
        Properties:
          AvailabilityZone:
             Fn::Select:
             - 0
             - Fn::GetAZs: {Ref: 'AWS::Region'}
          VpcId: !Ref 'VPC'
          CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
          MapPublicIpOnLaunch: true
          Tags:
            - Key: Name
              Value: !Sub CiCdEksLab-${AWS::StackName}
      PublicSubnetTwo:
        Type: AWS::EC2::Subnet
        Properties:
          AvailabilityZone:
             Fn::Select:
             - 1
             - Fn::GetAZs: {Ref: 'AWS::Region'}
          VpcId: !Ref 'VPC'
          CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
          MapPublicIpOnLaunch: true
          Tags:
            - Key: Name
              Value: !Sub MysfitsPublicTwo-${AWS::StackName}
    
      # Two private subnets where containers will only have private
      # IP addresses, and will only be reachable by other members of the
      # VPC
      PrivateSubnetOne:
        Type: AWS::EC2::Subnet
        Properties:
          AvailabilityZone:
             Fn::Select:
             - 0
             - Fn::GetAZs: {Ref: 'AWS::Region'}
          VpcId: !Ref 'VPC'
          CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
          Tags:
            - Key: Name
              Value: !Sub MysfitsPrivateOne-${AWS::StackName}
      PrivateSubnetTwo:
        Type: AWS::EC2::Subnet
        Properties:
          AvailabilityZone:
             Fn::Select:
             - 1
             - Fn::GetAZs: {Ref: 'AWS::Region'}
          VpcId: !Ref 'VPC'
          CidrBlock: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']
          Tags:
            - Key: Name
              Value: !Sub MysfitsPrivateTwo-${AWS::StackName}
    
      # Setup networking resources for the public subnets.
      InternetGateway:
        Type: AWS::EC2::InternetGateway
      GatewayAttachement:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
          VpcId: !Ref 'VPC'
          InternetGatewayId: !Ref 'InternetGateway'
      PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref 'VPC'
      PublicRoute:
        Type: AWS::EC2::Route
        DependsOn: GatewayAttachement
        Properties:
          RouteTableId: !Ref 'PublicRouteTable'
          DestinationCidrBlock: '0.0.0.0/0'
          GatewayId: !Ref 'InternetGateway'
      PublicSubnetOneRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: !Ref PublicSubnetOne
          RouteTableId: !Ref PublicRouteTable
      PublicSubnetTwoRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId: !Ref PublicSubnetTwo
          RouteTableId: !Ref PublicRouteTable
    
      # Setup networking resources for the private subnets. Containers
      # in these subnets have only private IP addresses, and must use a NAT
      # gateway to talk to the internet. We launch two NAT gateways, one for
      # each private subnet.
      NatGatewayOneAttachment:
        Type: AWS::EC2::EIP
        DependsOn: GatewayAttachement
        Properties:
            Domain: vpc
      NatGatewayTwoAttachment:
        Type: AWS::EC2::EIP
        DependsOn: GatewayAttachement
        Properties:
            Domain: vpc
      NatGatewayOne:
        Type: AWS::EC2::NatGateway
        Properties:
          AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
          SubnetId: !Ref PublicSubnetOne
      NatGatewayTwo:
        Type: AWS::EC2::NatGateway
        Properties:
          AllocationId: !GetAtt NatGatewayTwoAttachment.AllocationId
          SubnetId: !Ref PublicSubnetTwo
      PrivateRouteTableOne:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref 'VPC'
      PrivateRouteOne:
        Type: AWS::EC2::Route
        Properties:
          RouteTableId: !Ref PrivateRouteTableOne
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGatewayOne
      PrivateRouteTableOneAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref PrivateRouteTableOne
          SubnetId: !Ref PrivateSubnetOne
      PrivateRouteTableTwo:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref 'VPC'
      PrivateRouteTwo:
        Type: AWS::EC2::Route
        Properties:
          RouteTableId: !Ref PrivateRouteTableTwo
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGatewayTwo
      PrivateRouteTableTwoAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref PrivateRouteTableTwo
          SubnetId: !Ref PrivateSubnetTwo
